phylosig(tree,x,method="blomberg",test=TRUE)
phylosig(tree,x,method="K",test=TRUE)
tree
x
a = phylosig(tree,x,method="K",test=TRUE)
a
a = phylosig(tree,x,method="lambda",test=TRUE)
a
x
tree$tip.label
x %in% tree$tip.label
names(x)
names(x) %in% tree$tip.label
x[names(x) %in% tree$tip.label]
1/cophenetic(tree)
Moran.I(trait,w)
w <- 1/cophenetic(tree)
diag(w) = 0
w <- 1/cophenetic(tree)
Moran.I(trait,w)
trait = x[names(x) %in% tree$tip.label]
Moran.I(trait,w)
Moran.I(trait,w,scaled=TRUE)
trait
w
diag(w)
diag(w) = 0
diag(w)
Moran.I(trait,w,scaled=TRUE)
Moran.I(trait,w)
aa <- fastAnc(tree, x)
plot(aa, RR$par[2:length(RR$par)], xlab = "fastAnc", ylab = "custom")
AA <- fastAnc(tree, x, CI = TRUE)
print(AA)
aa <- fastAnc(tree, trait)
plot(aa, RR$par[2:length(RR$par)], xlab = "fastAnc", ylab = "custom")
AA <- fastAnc(tree, x, CI = TRUE)
print(AA)
tree
trait
fastAnc(tree,trait)
fancyTree(tree, type = "phenogram95", x = trait)
contMap(tree,trait)
Q <- matrix(c(-2, 1, 1, 1, -2, 1, 1, 1, -2), 3, 3)
colnames(Q) <- rownames(Q) <- letters[1:3]
x <- sim.history(tree, Q, anc = "a")$states
print(x)
fitER()
ace(trait,tree)
plotTree(tree,setEnv=TRUE,offset=0.5)
nodelabels(ace(trait,tree)$ace)
x
discrete <- sim.history(tree, Q, anc = "a")$states
ace(discrete,tree)
discrete
tree
fitER = rerootingMethod(tree,discrete,model="ER")
fitER
nodelabels(ace(tree,trait))
nodelabels(ace(discrete,tree))
ace(discrete,tree)
ace(discrete,tree,type="discrete")
trait.ace = ace(discrete,tree,type="discrete")
print(trait.ace)
trait.ace
trait.ace$lik.anc
nodelabels(node=as.numeric(rownames(trait.ace$lik.anc))+length(tree))
nodelabels(node=as.numeric(rownames(trait.ace$lik.anc))+length(tree)
pie = trait.ace$lik.anc,piecol=c("blue","red","yellow"))
nodelabels(node=as.numeric(rownames(trait.ace$lik.anc))+length(tree),
pie = trait.ace$lik.anc,
piecol=c("blue","red","yellow"))
plotTree(tree, setEnv = TRUE, offset = 0.5)
nodelabels(node=as.numeric(rownames(trait.ace$lik.anc))+length(tree),
pie = trait.ace$lik.anc,
piecol=c("blue","red","yellow"))
as.numeric(rownames(trait.ace$lik.anc))+length(tree)
as.numeric(rownames(trait.ace$lik.anc))
as.numeric(rownames(trait.ace$lik.anc))
rownames(trait.ace$lik.anc)
seq(0,10)
length(trait.ace$lik.anc)
nrow(trait.ace$lik.anc)
seq(length(tree),nrow(trait.ace$lik.anc))
length(tree)
tree
length(tree$tip.label)
seq(length(tree$tip.label),nrow(trait.ace$lik.anc))
seq(length(tree$tip.label),length(tree$tip.label)+nrow(trait.ace$lik.anc))
nodes = seq(length(tree$tip.label),length(tree$tip.label)+nrow(trait.ace$lik.anc))
nodelabels(node=nodes,
pie = trait.ace$lik.anc,
piecol=c("blue","red","yellow"))
nodelabels()
plotTree(tree, setEnv = TRUE, offset = 0.5)
nodes = seq(length(tree$tip.label)+1,length(tree$tip.label)+nrow(trait.ace$lik.anc))
nodelabels(node=nodes,
pie = trait.ace$lik.anc,
piecol=c("blue","red","yellow"))
plotTree(tree, setEnv = TRUE, offset = 0.5)
nodes = seq(length(tree$tip.label)+1,length(tree$tip.label)+nrow(trait.ace$lik.anc))
nodelabels(node=nodes,
pie = trait.ace$lik.anc,
piecol=c("blue","red","yellow"))
tiplabels(pie = to.matrix(discrete, sort(unique(discrete))), piecol = c("blue", "red", "yellow"),
cex = 0.3)
plotTree(tree, setEnv = TRUE, offset = 1)
nodes = seq(length(tree$tip.label)+1,length(tree$tip.label)+nrow(trait.ace$lik.anc))
nodelabels(node=nodes,
pie = trait.ace$lik.anc,
piecol=c("blue","red","yellow"))
tiplabels(pie = to.matrix(discrete, sort(unique(discrete))), piecol = c("blue", "red", "yellow"),
cex = 0.3)
plotTree(tree, setEnv = TRUE, offset = 1)
nodes = seq(length(tree$tip.label)+1,length(tree$tip.label)+nrow(trait.ace$lik.anc))
nodelabels(node=nodes,
pie = trait.ace$lik.anc,
piecol=c("blue","red","yellow"))
tiplabels(pie = to.matrix(discrete, sort(unique(discrete))), piecol = c("blue", "red", "yellow"),
cex = 0.3,offset=0.5)
plotTree(tree, setEnv = TRUE, offset = 1)
nodes = seq(length(tree$tip.label)+1,length(tree$tip.label)+nrow(trait.ace$lik.anc))
nodelabels(node=nodes,
pie = trait.ace$lik.anc,
piecol=c("blue","red","yellow"))
tiplabels(pie = to.matrix(discrete, sort(unique(discrete))), piecol = c("blue", "red", "yellow"),
cex = 0.3,offset=0.75)
plotTree(tree, setEnv = TRUE, offset = 1)
nodes = seq(length(tree$tip.label)+1,length(tree$tip.label)+nrow(trait.ace$lik.anc))
nodelabels(node=nodes,
pie = trait.ace$lik.anc,
piecol=c("blue","red","yellow"))
tiplabels(pie = to.matrix(discrete, sort(unique(discrete))), piecol = c("blue", "red", "yellow"),
cex = 0.3,offset=1)
mtree <- make.simmap(tree, discrete, model = "ER")
cols <- setNames(c("blue", "red", "yellow"), sort(unique(x)))
plotSimmap(mtree, cols, pts = FALSE, lwd = 3)
add.simmap.legend(colors = cols, vertical = FALSE, prompt = FALSE, x = 0, y = 24)
mtrees <- make.simmap(tree, discrete, model = "ER", nsim = 200)
describe.simmap(mtrees,plot=FALSE)
plotSimmap(mtrees[[1]], cols, lwd = 3, pts = F, setEnv = T)
nodelabels(pie = XX$ace, piecol = cols, cex = 0.6)
add.simmap.legend(colors = cols, vertical = FALSE, prompt = FALSE, x = 0, y = 24)
XX=describe.simmap(mtrees,plot=FALSE)
XX=describe.simmap(mtrees,plot=FALSE)
plotSimmap(mtrees[[1]], cols, lwd = 3, pts = F, setEnv = T)
nodelabels(pie = XX$ace, piecol = cols, cex = 0.6)
add.simmap.legend(colors = cols, vertical = FALSE, prompt = FALSE, x = 0, y = 24)
stateb <- mergeMappedStates(mtrees, c("b", "c"), "0")
stateb <- mergeMappedStates(stateb, "a", "1")
XX <- densityMap(stateb, lwd = 5)
y <- fastBM(tree, sig2 = 0.01, internal = TRUE)
trait2 = y[names(y) %in% tree$tip.label]
two.traits =cbind(trait,trait2)
phylomorphospace(tree,two.traits)
dev.off()
phylomorphospace(tree,two.traits,label='horizontal')
t.test(two.traits)
XY <- sim.corrs(tree, vcv = matrix(c(1, 0.5, 0.5, 1), 2, 2))
phylomorphospace(tree, XY, label = "horizontal")
phylomorphospace(XX$tree, XY, label = "horizontal", colors = XX$cols, node.by.map = TRUE)
pic(two.traits,tree)
two.traits
tree
pic(trait,tree)
XY
summary(lm(XY))
summary(lm(XY[,1]~XY[,2]))
XY1.pic = pic(XY[,1],tree)
XY1.pic = pic(XY[,1],tree)
XY2.pic = pic(XY[,2],tree)
summary(lm(XY1.pic~XY2.pic-1))
mean
print(mean)
library(phytools)
phylosig
?phylosig
nodes
nodes[1]
nodes[2]
sqrt
.Primitive("sqrt")
setwd("~/OneDrive - Texas Tech University/Courses/BIOL6304/CommunityPhylogenetics/PhyloCommEcolData")
pa.matrix <- read.table("pa.matrix.txt",sep="\t",header=T,row.names=1)
rowSums(pa.matrix)
View(pa.matrix)
pa.matrix <- read.table("pa.matrix.txt",sep=" ",header=T,row.names=1)
rowSums(pa.matrix)
colSums(pa.matrix)
colSums(pa.matrix)/nrow(pa.matrix)
library(picante)
my.3.sample = readsample("matrix.3col.txt")
my.3.sample
decostand(my.3.sample,method='pa',MARGIN=1)
my.sample = read.table("PD.example.sample.txt",sep=" ",row.names=1,header=T)
my.sample
my.sample = read.table("PD.example.sample.txt",sep="\t",row.names=1,header=T)
my.sample
my.phylo = read.tree("PD.example.phylo.txt")
my.phylo
plot(my.phylo)
library(geiger)
geo = get(data("geospiza"))
geo
keep.tip
com.1.abund = my.sample[1,my.sample[1, ] > 0]
com.1.abund
com.1.phylo = keep.tip(my.phylo,rownames(com.1.abund))
com.1.phylo = keep.tip(my.phylo,colnames(com.1.abund))
setdiff(my.phylo$tip.label,com.1.abund)
faith.pd = function(x) {
tmp.tree = keep.tip(my.phylo, x[x>0])
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
x = my.sample[,1]
x
x = my.sample[1,]
x
tmp.tree = keep.tip(my.phylo, x[x>0])
tmp.tree
x = my.sample[2,]
tmp.tree = keep.tip(my.phylo, x[x>0])
x
x[x>0]
colnames(x[x>0])
which(x>0)
which(x>0)
colnames(x[which(x>0)]
)
colnames(x[x>0])
faith.pd = function(x) {
tmp.com = colnames(x[which(x>0)])
tmp.tree = keep.tip(my.phylo, x[x>0])
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
faith.pd = function(x) {
tmp.com = colnames(x[which(x>0)])
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
tmp.com = colnames(x[which(x>0)])
tmp.com
keep.tip(my.phylo,tmp.com)
x
faith.pd = function(x) {
tmp.com = colnames(x[which(x>0)])
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
faith.pd = function(x) {
tmp.com = colnames(x[which(x>0)])
print(tmp.com)
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
faith.pd = function(x) {
tmp.com = colnames(x[which(x>0)])
print(tmp.com)
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
faith.pd = function(x) {
print(x)
tmp.com = colnames(x[which(x>0)])
print(tmp.com)
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
faith.pd = function(x) {
print(x)
tmp.com = colnames(x)[which(x>0)]
print(tmp.com)
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
faith.pd = function(x) {
print(x)
tmp.com = colnames(x)
print(tmp.com)
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
faith.pd = function(x) {
print(x)
tmp.com = colnames(x)
print(tmp.com)
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
faith.pd = function(x) {
print(x)
tmp.com = names(x)
print(tmp.com)
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
faith.pd = function(x) {
print(x)
tmp.com = names(x[x>0])
print(tmp.com)
tmp.tree = keep.tip(my.phylo, tmp.com)
sum(tmp.tree$edge.length)
}
apply(my.sample,MARGIN=1,faith.pd)
dist.mat = cophenetic(my.phylo)
dist.mat
psv(my.sample,my.phylo)
pse(my.sample,my.phylo)
psr(my.sample,my.phylo)
com.2.abund = my.sample[2,]
com.2.names = names[x[x>0])
com.2.abund = my.sample[2,]
com.2.names = names(x[x>0])
com.2.dist = dist.mat[com.2.names,com.2.names]
diag(com.2.dist) = NA
com.2.dist
dist.mat[com.2.names,com.2.names]
com.2.abund = my.sample[2,]
com.2.names = names(com.2.abund[com.2.abund>0])
com.2.dist = dist.mat[com.2.names,com.2.names]
diag(com.2.dist) = NA
com.2.dist
com.2.names
com.2.abund
com.2.abund>0
com.2.abund[com.2.abund>0]
names(which(com.2.abund>0)
_
names(which(com.2.abund>0))
which(com.2.abund>0)
names(com.2.abund)[which(com.2.abund>0)]
names(com.2.abund)[which(com.2.abund>0)]
names(com.2.abund[com.2.abund>0])
com.2.abund[com.2.abund>0]
com.2.names = names(com.2.abund)[which(com.2.abund>0)]
com.2.dist = dist.mat[com.2.names,com.2.names]
diag(com.2.dist) = NA
com.2.dist
com.2.ntd=apply(com.2.dist,MARGIN=1,min)
com.2.ntd
mean(com.2.ntd,na.rm=T)
com.2.ntd=apply(com.2.dist,MARGIN=1,min,na.rm=T)
com.2.ntd
my.mntd = function(x){
com.names = names(x[x>0)
my.com.dist = dist.mat[com.names,com.names]
diag(my.com.dist) = NA
mean(apply(my.com.dist,MARGIN=1,min,na.rm=T))
}
my.mntd = function(x){
com.names = names(x[x>0))
my.com.dist = dist.mat[com.names,com.names]
diag(my.com.dist) = NA
mean(apply(my.com.dist,MARGIN=1,min,na.rm=T))
}
my.mntd = function(x){
com.names = names(x[x>0])
my.com.dist = dist.mat[com.names,com.names]
diag(my.com.dist) = NA
mean(apply(my.com.dist,MARGIN=1,min,na.rm=T))
}
apply(my.sample,MARGIN=1,my.mntd)
psr(my.sample,my.phylo)
mntd(my.sample,dist.mat,abundance.weighted=T)
library(phytools)
plotTree(my.phylo)
my.sample
my.traits = t(my.sample)
my.traits
dotTree(my.phylo,my.traits)
dotTree(my.phylo,my.traits,standardize=T)
beta.sample = read.table("beta.example.sample.txt",sep="\t",row.names=1,header=T)
beta.phylo = read.tree("beta.example.phylo.txt")
unifrac(beta.sample,beta.phylo)
data(phylocom)
phylocom$sample
phylocom$phylo
hclust(unifrac(beta.sample,beta.phylo))
plot(hclust(unifrac(beta.sample,beta.phylo)))
install.packages("gunifrac")
install.packages("GUniFrac")
library(GUniFrac)
GUniFrac(beta.sample,beta.phylo)
my.gunifrac= GUniFrac(beta.sample,beta.phylo)
my.gunifrac$unifracs
my.gunifrac$unifracs[,,"d_1"]
plot(hclust(my.gunifrac$unifracs[,,"d_1"]))
weighted.unifrac = as.dist(my.gunifrac$unifracs[,,"d_1"])
plot(hclust(weighted.unifrac))
null.sample = read.table("null.example.sample.txt,sep="\t",row.names=1,header=T)
null.phylo = read.tree("null.example.phylo.txt")
null.sample = read.table("null.example.sample.txt",sep="\t",row.names=1,header=T)
null.phylo = read.tree("null.example.phylo.txt")
randomizeMatrix(null.sample)
null.sample
randomizeMatrix(null.sample)
randomizeMatrix(null.sample)
pd(null.sample,null.phylo)
replicate(5,randomizeMatrix(null.sample,null.model="independentswap")
)
replicate(5,randomizeMatrix(null.sample,null.model="independentswap"))
lapply(replicate(5,randomizeMatrix(null.sample,null.model="independentswap")),pd)
lapply(replicate(5,randomizeMatrix(null.sample,null.model="independentswap")),pd,tree=null.phylo)
reps.is = randomizeMatrix(null.sample,null.model="independentswap"))
reps.is = randomizeMatrix(null.sample,null.model="independentswap")
View(reps.is)
reps.is = as.list(randomizeMatrix(null.sample,null.model="independentswap"))
reps.is = randomizeMatrix(null.sample,null.model="independentswap")
View(reps.is)
class(reps.is)
reps.is
replicate(5,randomizeMatrix(null.sample,null.model="independentswap"))
replicate(5,randomizeMatrix(null.sample,null.model="independentswap"),simplify='array')
replicate(5,randomizeMatrix(null.sample,null.model="independentswap"),simplify='list')
replicate(5,randomizeMatrix(null.sample,null.model="independentswap"),simplify=FALSE)
replicate(5,randomizeMatrix(null.sample,null.model="independentswap"),simplify=FALSE)$1
replicate(5,randomizeMatrix(null.sample,null.model="independentswap"),simplify=FALSE)[[1]]
null.reps = replicate(100,randomizeMatrix(null.sample,null.model="independentswap"),simplify=FALSE)
lapply(null.reps,pd,tree=null.phylo)
pd.null = lapply(null.reps,pd,tree=null.phylo)
pd.null[[1]]
pd.null[[1]][1,1]
lapply(pd.null,function(x) x[1,1])
as.vector(lapply(pd.null,function(x) x[1,1]))
hist(lapply(pd.null,function(x) x[1,1]))
as.numeric(lapply(pd.null,function(x) x[1,1]))
com.1.pd.null = as.numeric(lapply(pd.null,function(x) x[1,1])
hist(com1.pd.null)
com.1.pd.null = as.numeric(lapply(pd.null,function(x) x[1,1]))
hist(com.pd.null)
hist(com.1.pd.null)
dev.off()
hist(com.1.pd.null)
abline(v=pd(null.sample,null.phylo))
pd(null.sample,null.phylo)
pd(null.sample,null.phylo)[1,1]
abline(v=pd(null.sample,null.phylo)[1,1],col='red)
)
)
abline(v=pd(null.sample,null.phylo)[1,1],col='red')
hist(com.1.pd.null,bins=20)
hist(com.1.pd.null,n=20)
hist(com.1.pd.null,breaks=20)
abline(v=pd(null.sample,null.phylo)[1,1],col='red')
dotchart(com.1.pd.null)
library(ggplot)
library(ggplot2)
ggplot(com.1.pd.null) + geom_dotplot()
rug(com.1.pd.null)
dev.off()
rug(com.1.pd.null)
stripchart(com.1.pd.null)
stripchart(com.1.pd.null,method='stack')
stripchart(com.1.pd.null,method='stack',col="gray")
stripchart(com.1.pd.null,method='stack')
stripchart(com.1.pd.null,method='stack')
stripchart(com.1.pd.null,method='stack')
abline(v=pd(null.sample,null.phylo)[1,1],col='red')
replicate(10,tipShuffle(null.phylo))
replicate(10,tipShuffle(null.phylo))[[1]]
replicate(10,tipShuffle(null.phylo))[1]
replicate(10,tipShuffle(null.phylo),simplify=F)
par(mfrow=c(1,2))
plot(null.phylo,title="Orginal Phylogeny")
plot(random.phylo,title="Shuffled Phylogeny")
par(mfrow=c(1,1))
random.phylo = tipShuffle(null.phylo)
dev.of()
dev.off()
par(mfrow=c(1,2))
plot(null.phylo,main="Orginal Phylogeny")
plot(random.phylo,main="Shuffled Phylogeny")
par(mfrow=c(1,1))
random.phylo = replicate(100,tipShuffle(null.phylo),simplify=F)
random.phylo.pd = lapply(random.phylo,pd,sample=null.sample)
random.phylo = replicate(100,tipShuffle(null.phylo),simplify=F)
lapply(random.phylo,pd,sample=null.sample)
random.phylo.pd = lapply(random.phylo,pd,samp=null.sample)
random.phylo.pd
random.phylo = replicate(100,tipShuffle(null.phylo),simplify=F)
random.phylo.pd = lapply(random.phylo,pd,samp=null.sample)
com.1.phylo.pd = as.numeric(lapply(pd.null,function(x) x[1,1])
stripchart(com.1.phylo.pd,method='stack')
abline(v=pd(null.sample,null.phylo)[1,1],col='red')
random.phylo = replicate(100,tipShuffle(null.phylo),simplify=F)
random.phylo.pd = lapply(random.phylo,pd,samp=null.sample)
com.1.phylo.pd = as.numeric(lapply(random.phylo.pd,function(x) x[1,1]))
stripchart(com.1.phylo.pd,method='stack')
abline(v=pd(null.sample,null.phylo)[1,1],col='red')
com.1.phylo.pd
com.1.pd.null
pd.observed = lapply(null.reps,pd,tree=null.phylo)
rank(pd.observed,com.1.phylo.pd)
rank(pd.observed,com.1.pd.null)
com.1.pd.null
rank(c(pd.observed,com.1.pd.null))
pd.observed
pd.observed = pd(null.sample,null.phylo)
pd.observed
pd.observed[.1.]
pd.observed[1,1]
rank(c(pd.observed[1,1],com.1.pd.null))
rank(c(pd.observed[1,1],com.1.pd.null))[1]
